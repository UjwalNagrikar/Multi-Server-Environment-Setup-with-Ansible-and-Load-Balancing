---
- name: Deploy Multi-Server Environment with Load Balancing
  hosts: webservers
  become: yes

  vars:
    app_dir: /var/www/multi-server-demo

  tasks:
    - name: Gather system facts
      setup:

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create HTML template file
      copy:
        dest: "/tmp/index.html.j2"
        content: |
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Multi-Server Environment Setup</title>
            <style>
              body {
                font-family: 'Arial', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 0;
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
                color: white;
              }
              .container {
                background: rgba(255, 255, 255, 0.1);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                padding: 40px;
                box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
                border: 1px solid rgba(255, 255, 255, 0.18);
                text-align: center;
                max-width: 800px;
                margin: 20px;
              }
              h1 {
                font-size: 2.8em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
                color: #ffffff;
              }
              .subtitle {
                font-size: 1.4em;
                margin-bottom: 30px;
                color: #e8f4fd;
                font-weight: 300;
              }
              .features {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 30px 0;
              }
              .feature-card {
                background: rgba(255, 255, 255, 0.15);
                padding: 25px;
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
              }
              .feature-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
              }
              .feature-icon {
                font-size: 2.5em;
                margin-bottom: 15px;
                display: block;
              }
              .feature-title {
                font-size: 1.2em;
                font-weight: bold;
                margin-bottom: 10px;
                color: #ffffff;
              }
              .feature-desc {
                font-size: 0.95em;
                color: #e8f4fd;
                line-height: 1.5;
              }
              .server-info {
                background: rgba(255, 255, 255, 0.2);
                padding: 20px;
                border-radius: 15px;
                margin-top: 30px;
                border: 1px solid rgba(255, 255, 255, 0.3);
              }
              .server-info h3 {
                margin: 0 0 15px 0;
                color: #ffffff;
              }
              .server-details {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                text-align: left;
              }
              .detail-item {
                background: rgba(0, 0, 0, 0.2);
                padding: 10px 15px;
                border-radius: 8px;
                font-size: 0.9em;
              }
              .status-indicator {
                display: inline-block;
                width: 10px;
                height: 10px;
                background: #4ade80;
                border-radius: 50%;
                margin-right: 8px;
                animation: pulse 2s infinite;
              }
              @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.5; }
                100% { opacity: 1; }
              }
              .footer {
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid rgba(255, 255, 255, 0.2);
                font-size: 0.9em;
                color: #e8f4fd;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üöÄ Multi-Server Environment Setup</h1>
              <p class="subtitle">Ansible & Load Balancing Demonstration</p>
              
              <div class="features">
                <div class="feature-card">
                  <span class="feature-icon">‚ö°</span>
                  <div class="feature-title">Automated Deployment</div>
                  <div class="feature-desc">Seamless configuration management across multiple Linux servers using Ansible playbooks</div>
                </div>
                
                <div class="feature-card">
                  <span class="feature-icon">üîÑ</span>
                  <div class="feature-title">Load Balancing</div>
                  <div class="feature-desc">Nginx-powered load balancer distributing traffic across multiple web server nodes</div>
                </div>
                
                <div class="feature-card">
                  <span class="feature-icon">üõ†Ô∏è</span>
                  <div class="feature-title">Infrastructure as Code</div>
                  <div class="feature-desc">Version-controlled infrastructure with repeatable, consistent deployments</div>
                </div>
                
                <div class="feature-card">
                  <span class="feature-icon">üìä</span>
                  <div class="feature-title">High Availability</div>
                  <div class="feature-desc">Fault-tolerant architecture with multiple server instances and health monitoring</div>
                </div>
              </div>

              <div class="server-info">
                <h3><span class="status-indicator"></span>Server Status</h3>
                <div class="server-details">
                  <div class="detail-item">
                    <strong>Server:</strong> {{ ansible_hostname }}
                  </div>
                  <div class="detail-item">
                    <strong>IP Address:</strong> {{ ansible_default_ipv4.address }}
                  </div>
                  <div class="detail-item">
                    <strong>OS:</strong> {{ ansible_distribution }} {{ ansible_distribution_version }}
                  </div>
                  <div class="detail-item">
                    <strong>Uptime:</strong> {{ (ansible_uptime_seconds | int // 3600) }}h {{ ((ansible_uptime_seconds | int % 3600) // 60) }}m
                  </div>
                  <div class="detail-item">
                    <strong>Load Balancer:</strong> Nginx (Active)
                  </div>
                  <div class="detail-item">
                    <strong>Deployment:</strong> Ansible Automated
                  </div>
                </div>
              </div>

              <div class="footer">
                <p><strong>Project Features:</strong> Multi-node architecture ‚Ä¢ Automated provisioning ‚Ä¢ Load balancing ‚Ä¢ Health monitoring ‚Ä¢ Scalable infrastructure</p>
                <p><em>Demonstrating enterprise-grade DevOps practices with Ansible and Linux server management</em></p>
              </div>
            </div>

            <script>
              // Add some dynamic elements
              document.addEventListener('DOMContentLoaded', function() {
                // Animate feature cards on load
                const cards = document.querySelectorAll('.feature-card');
                cards.forEach((card, index) => {
                  card.style.opacity = '0';
                  card.style.transform = 'translateY(20px)';
                  setTimeout(() => {
                    card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                  }, index * 150);
                });

                // Update timestamp
                setInterval(function() {
                  const now = new Date();
                  const timeStr = now.toLocaleTimeString();
                  document.title = `Multi-Server Environment - ${timeStr}`;
                }, 1000);
              });
            </script>
          </body>
          </html>

    - name: Deploy updated HTML application
      template:
        src: "/tmp/index.html.j2"
        dest: "{{ app_dir }}/index.html"
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Install required packages
      apt:
        name:
          - nginx
          - curl
          - htop
          - net-tools
        state: present
        update_cache: yes

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Remove default Nginx config if exists
      file:
        path: /var/www/html
        state: absent

    - name: Configure Nginx for Multi-Server Demo
      copy:
        dest: /etc/nginx/sites-available/multi-server-demo.conf
        content: |
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;
              root {{ app_dir }};
              index index.html;

              # Enable gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

              location / {
                  try_files $uri $uri/ =404;
                  add_header X-Served-By $hostname;
                  add_header X-Server-IP $server_addr;
                  expires 1h;
              }

              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 "OK - Server: $hostname, IP: $server_addr\n";
                  add_header Content-Type text/plain;
                  add_header X-Health-Check "pass";
              }

              # Server status endpoint  
              location /status {
                  access_log off;
                  return 200 '{"status":"healthy","server":"$hostname","timestamp":"$time_iso8601"}';
                  add_header Content-Type application/json;
              }

              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header Referrer-Policy "strict-origin-when-cross-origin" always;
          }

    - name: Enable Multi-Server Demo site
      file:
        src: /etc/nginx/sites-available/multi-server-demo.conf
        dest: /etc/nginx/sites-enabled/multi-server-demo.conf
        state: link

    - name: Test Nginx configuration
      command: nginx -t
      changed_when: false

    - name: Force reload Nginx to apply configuration
      service:
        name: nginx
        state: reloaded

    - name: Ensure Nginx is running and enabled
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Wait for Nginx to be ready
      wait_for:
        port: 80
        delay: 2
        timeout: 10

    - name: Create server identification file
      copy:
        dest: "{{ app_dir }}/server-info.json"
        content: |
          {
            "hostname": "{{ ansible_hostname }}",
            "ip_address": "{{ ansible_default_ipv4.address }}",
            "os": "{{ ansible_distribution }} {{ ansible_distribution_version }}",
            "deployment_time": "{{ ansible_date_time.iso8601 }}",
            "ansible_managed": true,
            "load_balanced": true,
            "server_role": "web_server"
          }
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Verify web server is responding
      uri:
        url: "http://{{ ansible_default_ipv4.address }}/health"
        method: GET
        return_content: yes
      register: health_check
      retries: 5
      delay: 3

    - name: Display health check results
      debug:
        msg: "Health check response: {{ health_check.content }}"

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
